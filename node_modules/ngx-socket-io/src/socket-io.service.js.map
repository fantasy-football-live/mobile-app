{"version":3,"file":"socket-io.service.js","sourceRoot":"","sources":["../../src/socket-io.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport * as io from 'socket.io-client';\n\nimport { SocketIoConfig } from './config/socket-io.config';\nimport { SOCKET_CONFIG_TOKEN } from './socket-io.module';\n\nexport class WrappedSocket {\n    subscribersCounter : number = 0;\n    ioSocket: any;\n    emptyConfig: SocketIoConfig = {\n        url: '',\n        options: {}\n    };\n\n    constructor(@Inject(SOCKET_CONFIG_TOKEN) config: SocketIoConfig) {\n        if (config === undefined) config = this.emptyConfig;\n        const url: string = config.url;\n        const options: any = config.options;\n        var ioFunc = (io as any).default ? (io as any).default : io;\n        this.ioSocket = ioFunc(url, options);\n    }\n\n    of(namespace: string) {\n        this.ioSocket.of(namespace);\n    }\n\n    on(eventName: string, callback: Function) {\n        this.ioSocket.on(eventName, callback);\n    }\n\n    once(eventName: string, callback: Function) {\n        this.ioSocket.once(eventName, callback);\n    }\n\n    connect() {\n        return this.ioSocket.connect();\n    }\n\n    disconnect(close?: any) {\n        return this.ioSocket.disconnect.apply(this.ioSocket, arguments);\n    }\n\n    emit(eventName: string, data?: any, callback?: Function) {\n        return this.ioSocket.emit.apply(this.ioSocket, arguments);\n    }\n\n    removeListener(eventName: string, callback?: Function) {\n        return this.ioSocket.removeListener.apply(this.ioSocket, arguments);\n    }\n\n    removeAllListeners(eventName?: string) {\n        return this.ioSocket.removeAllListeners.apply(this.ioSocket, arguments);\n    }\n\n    fromEvent<T>(eventName: string): Observable<T> {\n        this.subscribersCounter++;\n        return Observable.create( (observer: any) => {\n             this.ioSocket.on(eventName, (data: T) => {\n                 observer.next(data);\n             });\n             return () => {\n                 if (this.subscribersCounter === 1)\n                    this.ioSocket.removeListener(eventName);\n            };\n        }).pipe(\n            share()\n        );\n    }\n\n    fromOneTimeEvent<T>(eventName: string): Promise<T> {\n        return new Promise<T>(resolve => this.once(eventName, resolve));\n    }\n\n}"]}