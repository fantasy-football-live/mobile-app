{"version":3,"sources":["webpack:///./src/app/Pages/News/news.module.ts","webpack:///./src/app/Pages/News/news.page.html","webpack:///./src/app/Pages/News/news.page.scss","webpack:///./src/app/Pages/News/news.page.ts","webpack:///./src/app/Services/reddit-data/reddit.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEN;AAC+B;AAEtE,IAAM,MAAM,GAAW;IACtB;QACC,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,mDAAQ;KACnB;CACD,CAAC;AAMF;IAAA;IAA6B,CAAC;IAAjB,cAAc;QAJ1B,8DAAQ,CAAC;YACT,OAAO,EAAE,CAAE,4DAAY,EAAE,0DAAW,EAAE,0DAAW,EAAE,8EAAgB,EAAE,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAE;YACpG,YAAY,EAAE,CAAE,mDAAQ,CAAE;SAC1B,CAAC;OACW,cAAc,CAAG;IAAD,qBAAC;CAAA;AAAH;;;;;;;;;;;;ACrB3B,gtBAAgtB,cAAc,qBAAqB,YAAY,0E;;;;;;;;;;;ACA/vB,8BAA8B,uBAAuB,WAAW,YAAY,iBAAiB,gBAAgB,EAAE,gBAAgB,iBAAiB,EAAE,+CAA+C,ulB;;;;;;;;;;;;;;;;;;;;;;;;;ACA/I;AAE0B;AAO5E;IAKC,kBAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAHhD,UAAK,GAAG,MAAM,CAAC;QACf,gBAAW,GAAG,IAAI,CAAC;QAGlB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACvB,CAAC;IAED,2BAAQ,GAAR;QACC,IAAI,CAAC,cAAc,EAAE,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,iCAAc,GAAd;QAAA,iBAKC;QAJA,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,UAAC,KAAK;YAClD,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC1B,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,0BAAO,GAAP,UAAQ,KAAK;QACZ,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,gCAAa,GAAb,UAAc,GAAW;QACxB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,CAAC;IAlCW,QAAQ;QALpB,+DAAS,CAAC;YACV,QAAQ,EAAE,UAAU;YACpB,4FAA+B;;SAE/B,CAAC;yCAMkC,yFAAa;OALpC,QAAQ,CAmCpB;IAAD,eAAC;CAAA;AAnCoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTsB;AAC+B;AAK1E;IACC,uBAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;IAAG,CAAC;IAExD,0CAAkB,GAAxB;;;;;4BACc,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAC/C,uDAAuD,CACvD;;wBAFK,IAAI,GAAG,SAEZ;wBACD,sBAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,QAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAlB,CAAkB,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI;gCACvE,OAAO;oCACN,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG;oCAClB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;oCACtB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS;iCAC1B,CAAC;4BACH,CAAC,CAAC,EAAC;;;;KACH;IAdW,aAAa;QAHzB,gEAAU,CAAC;YACX,UAAU,EAAE,MAAM;SAClB,CAAC;yCAEuC,qFAAkB;OAD9C,aAAa,CAezB;IAAD,oBAAC;CAAA;AAfyB","file":"Pages-News-news-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { NewsPage } from './news.page';\nimport { ComponentsModule } from '../../Components/components.module';\n\nconst routes: Routes = [\n\t{\n\t\tpath: '',\n\t\tcomponent: NewsPage\n\t}\n];\n\n@NgModule({\n\timports: [ CommonModule, FormsModule, IonicModule, ComponentsModule, RouterModule.forChild(routes) ],\n\tdeclarations: [ NewsPage ]\n})\nexport class NewsPageModule {}\n","module.exports = \"<app-header [title]=\\\"'NEWS'\\\"></app-header>\\n<ion-backdrop *ngIf=\\\"showSpinner\\\" tappable=\\\"false\\\"></ion-backdrop>\\n<app-loading-spinner *ngIf=\\\"showSpinner\\\"></app-loading-spinner>\\n<ion-content>\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"refresh($event)\\\">\\n    <ion-refresher-content refreshingSpinner=\\\"circles\\\" refreshingText=\\\"Refreshing...\\\"></ion-refresher-content>\\n  </ion-refresher>\\n  <ion-list>\\n    <ion-item data-aos=\\\"fade-up\\\" lines=\\\"inset\\\" button *ngFor=\\\"let post of latestPosts\\\" (click)=\\\"openNewsStory(post.url)\\\">\\n      <ion-avatar slot=\\\"start\\\">\\n        <img [src]=\\\"post.image\\\" alt=\\\"post.title\\\">\\n      </ion-avatar>\\n      <ion-label text-wrap>\\n        <h2>{{ post.title }}</h2>\\n        <p> {{ post.url }} </p>\\n      </ion-label>\\n    </ion-item>\\n  </ion-list>\\n</ion-content>\"","module.exports = \".news-link {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  height: 100%;\\n  width: 100%; }\\n\\n.main-logo {\\n  height: 50px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hcHBsZS9Eb2N1bWVudHMvUHJvamVjdHMvRmFudGFzeUZvb3RiYWxsTGl2ZS9tb2JpbGUtYXBwL3NyYy9hcHAvUGFnZXMvTmV3cy9uZXdzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGtCQUFrQjtFQUNsQixNQUFNO0VBQ04sT0FBTztFQUNQLFlBQVk7RUFDWixXQUFXLEVBQUE7O0FBR2Y7RUFDSSxZQUFZLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9QYWdlcy9OZXdzL25ld3MucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm5ld3MtbGluayB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLm1haW4tbG9nbyB7XG4gICAgaGVpZ2h0OiA1MHB4O1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\n\nimport { RedditService } from 'src/app/Services/reddit-data/reddit.service';\n\n@Component({\n\tselector: 'app-news',\n\ttemplateUrl: './news.page.html',\n\tstyleUrls: [ './news.page.scss' ]\n})\nexport class NewsPage implements OnInit {\n\tlatestPosts: any[];\n\ttitle = 'NEWS';\n\tshowSpinner = true;\n\n\tconstructor(private redditService: RedditService) {\n\t\tthis.latestPosts = [];\n\t}\n\n\tngOnInit() {\n\t\tthis.getLatestPosts();\n\t}\n\n\t/**\n\t * @description fetches the latest posts from reddit\n\t */\n\tgetLatestPosts() {\n\t\tthis.redditService.getLatestLinkPosts().then((posts) => {\n\t\t\tthis.latestPosts = posts;\n\t\t\tthis.showSpinner = false;\n\t\t});\n\t}\n\n\trefresh(event) {\n\t\tthis.getLatestPosts();\n\t\tevent.target.complete();\n\t}\n\n\t/**\n\t * @description opens the link selected by the user\n\t * @param url url of link to be opened\n\t */\n\topenNewsStory(url: string) {\n\t\twindow.open(url);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequestService } from '../http-request/http-request.service';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class RedditService {\n\tconstructor(private httpRequestService: HttpRequestService) {}\n\n\tasync getLatestLinkPosts() {\n\t\tconst data = await this.httpRequestService.fetch(\n\t\t\t'https://www.reddit.com/r/fantasypl/new/.json?limit=80'\n\t\t);\n\t\treturn data.data.children.filter((post) => !post.data.is_self).map((post) => {\n\t\t\treturn {\n\t\t\t\turl: post.data.url,\n\t\t\t\ttitle: post.data.title,\n\t\t\t\timage: post.data.thumbnail\n\t\t\t};\n\t\t});\n\t}\n}\n"],"sourceRoot":""}